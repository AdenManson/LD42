<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_monitor_off</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable Initalization

image_speed = 0;
image_index = 0;

on = false;
clicked = false;
startX = x;
startY = y;
if(obj_first_time.firstTime) canClick = false;
if(!obj_first_time.firstTime) canClick = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Idle

sprite_index = spr_monitor_idle;
image_index = 0;
image_speed = 0;

obj_monitor_on.on = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn On

if(room == rm_main) {

    if(obj_monitor_on.on) sprite_index = spr_monitor_idle;

    if(obj_button.clicked &amp;&amp; !obj_monitor_on.on) {
        sprite_index = spr_monitor_on;
        if(image_index &lt;= 11) {
            image_speed = 0.25;
            alarm[0] = 50;
        } else {
            image_speed = 0;
        }
    }

    if(!global.pause) {
        if(canClick) {
            if(obj_monitor_on.on) {
                //debug("state: " + string(obj_tutorial.state) + " " + string(canClick))
                if(position_meeting(mouse_x, mouse_y, self) &amp;&amp; (image_xscale == 1)) {
                    image_index = 1;
                    image_blend = make_colour_rgb(200, 200, 200);
                    
                    if(mouse_check_button_pressed(mb_left)) {
                        clicked = true;
                        instance_destroy(obj_menu_button);
                    }
                    
            } else {
                image_index = 0;
                image_blend = c_white;
        }
    }
}

    if(!global.pause &amp;&amp; canClick) {
        if(clicked) {
            if(x &lt;= room_width/2-120) phy_position_x+=7;
            if(y &lt;= room_height/2) phy_position_y+=4;
        
            if(image_xscale &lt; 6) {
                image_xscale += 0.25;
            } else {
                clicked = false;
                if(instance_exists(obj_digital_file)) {
                    obj_digital_file.visible = false;
                    obj_digital_file.alarm[0] = 20;
                }
                room_goto(rm_screen);
            }
            image_yscale = image_xscale;
        }
    }
    
    
    if(room != rm_main) {
        visible = false;
    } else {
        visible = true;
}}

if(!global.pause) {
    if(sprite_index == spr_monitor_idle) {
        if(position_meeting(mouse_x, mouse_y, self)) {
            if(mouse_check_button_pressed(mb_left)) {
                audio_sound_pitch(sd_click, random_range(0.8, 1.2));
                audio_play_sound(sd_click, 10, 0);
            }
        }
    }
}


}





    if(obj_first_time.firstTime) {
        if(obj_tutorial.state &lt; 15) {
            canClick = false;
        } else {
            canClick = true;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>96,0</point>
    <point>96,80</point>
    <point>0,80</point>
  </PhysicsShapePoints>
</object>
